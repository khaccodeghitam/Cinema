/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import log_reg.UI;
import BUS.NhanVienBUS;
import DAO.PhanQuyenDAO;
import DAO.TaiKhoanDAO;
import DTO.NhanVienDTO;
import DTO.TaiKhoanDTO;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class TaikhoanGUI extends javax.swing.JPanel {
   private NhanVienBUS nhanVienBUS;
    private TaiKhoanDAO taiKhoanDAO;
    private PhanQuyenDAO phanQuyenDAO;
    private DefaultTableModel tableModel;
    private Map<String, String> mapTenToMaPhanQuyen;
    private String selectedMaTaiKhoan;
    public TaikhoanGUI() {
       initComponents();
        txTennv.setEditable(false);
        txNgayvaolam.setEditable(false);
        UI.addPlaceHolderEffect(txDangnhap,"Nhập tên đăng nhập");
        
        nhanVienBUS = new NhanVienBUS();
        taiKhoanDAO = new TaiKhoanDAO();
        phanQuyenDAO = new PhanQuyenDAO();
        mapTenToMaPhanQuyen = new HashMap<>();

        // Load employee IDs into combobox
        loadEmployeeIDs();
        tableModel = (DefaultTableModel) tbTaikhoan.getModel();
        loadTableData();
        loadPhanQuyen();

        // Add listener to combobox for employee selection
        cbManv.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    updateEmployeeInfo();
                }
            }
        });
    
        btnXacnhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themTaiKhoanButtonActionPerformed(evt);
            }
        });
        
        // Thêm sự kiện cho nút Reset
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        
        // Thêm sự kiện cho nút Cập nhật
        btnCapnhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capNhatTaiKhoanButtonActionPerformed(evt);
            }
        });
        
        // Thêm sự kiện cho nút Xóa
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xoaTaiKhoanButtonActionPerformed(evt);
            }
        });
        
        // Thêm sự kiện cho bảng - xử lý khi click vào một hàng
        tbTaikhoan.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tbTaikhoan.getSelectedRow();
                if (selectedRow >= 0) {
                    hienThiThongTinTaiKhoan(selectedRow);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Manv = new javax.swing.JLabel();
        cbManv = new javax.swing.JComboBox<>();
        Tennv = new javax.swing.JLabel();
        txTennv = new javax.swing.JTextField();
        Ngayvaolam = new javax.swing.JLabel();
        txNgayvaolam = new javax.swing.JTextField();
        Nhomquyen = new javax.swing.JLabel();
        cb_txPhanquyen = new javax.swing.JComboBox<>();
        btnXacnhan = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        Ngayvaolam1 = new javax.swing.JLabel();
        txDangnhap = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTaikhoan = new javax.swing.JTable();
        btnCapnhat = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();

        jPanel1.setPreferredSize(new java.awt.Dimension(1092, 633));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        Manv.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Manv.setText("Mã nhân viên:");

        cbManv.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cbManv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Truy xuất bảng nv" }));

        Tennv.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Tennv.setText("Tên nhân viên:");

        txTennv.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        txTennv.setText("Truy xuất dựa vào mã nv");
        txTennv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txTennvActionPerformed(evt);
            }
        });

        Ngayvaolam.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Ngayvaolam.setText("Ngày vào làm:");

        txNgayvaolam.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        txNgayvaolam.setText("Truy xuất dựa vào mã nv");

        Nhomquyen.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Nhomquyen.setText("Nhóm quyền:");

        cb_txPhanquyen.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        cb_txPhanquyen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Truy xuất bảng phân quyền" }));

        btnXacnhan.setBackground(new java.awt.Color(0, 122, 77));
        btnXacnhan.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnXacnhan.setForeground(new java.awt.Color(255, 255, 255));
        btnXacnhan.setText("Thêm");
        btnXacnhan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242), 3));

        btnReset.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnReset.setText("Reset");

        Ngayvaolam1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        Ngayvaolam1.setText("Tên đăng nhập:");

        txDangnhap.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        txDangnhap.setText("Tự nhập thêm");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Nhomquyen, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cb_txPhanquyen, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Ngayvaolam, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txNgayvaolam, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Manv, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Tennv, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txTennv, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(cbManv, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Ngayvaolam1)
                        .addGap(25, 25, 25)
                        .addComponent(txDangnhap, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnXacnhan, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Manv, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbManv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Tennv, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txTennv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ngayvaolam, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txNgayvaolam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Ngayvaolam1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txDangnhap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Nhomquyen, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_txPhanquyen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXacnhan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tbTaikhoan.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        tbTaikhoan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Tên đăng nhập", "Nhóm quyền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbTaikhoan.setGridColor(new java.awt.Color(0, 0, 0));
        tbTaikhoan.setRowHeight(35);
        tbTaikhoan.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tbTaikhoan.setSelectionForeground(new java.awt.Color(0, 51, 51));
        tbTaikhoan.setShowVerticalLines(true);
        jScrollPane1.setViewportView(tbTaikhoan);

        btnCapnhat.setBackground(new java.awt.Color(255, 255, 0));
        btnCapnhat.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnCapnhat.setText("Cập nhật");
        btnCapnhat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242), 3));

        btnXoa.setBackground(new java.awt.Color(204, 0, 51));
        btnXoa.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setText("Xóa");
        btnXoa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(242, 242, 242), 3));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCapnhat, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCapnhat, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txTennvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txTennvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txTennvActionPerformed
        
    private void hienThiThongTinTaiKhoan(int selectedRow) {
        // Lấy thông tin từ hàng được chọn
        String maNV = tableModel.getValueAt(selectedRow, 0).toString();
        String tenDangNhap = tableModel.getValueAt(selectedRow, 2).toString();
        String maPhanQuyen = tableModel.getValueAt(selectedRow, 3).toString();
        
        // Lấy mã tài khoản từ tên đăng nhập
        ArrayList<TaiKhoanDTO> danhSachTaiKhoan = taiKhoanDAO.getDanhSachTaiKhoan();
        for (TaiKhoanDTO tk : danhSachTaiKhoan) {
            if (tk.getTenDangNhap().equals(tenDangNhap)) {
                selectedMaTaiKhoan = tk.getMaTaiKhoan();
                break;
            }
        }
        
        // Cập nhật thông tin lên các trường nhập liệu
        // Chọn mã nhân viên trong combobox
        for (int i = 0; i < cbManv.getItemCount(); i++) {
            if (cbManv.getItemAt(i).equals(maNV)) {
                cbManv.setSelectedIndex(i);
                break;
            }
        }
        
        // Hiển thị tên đăng nhập
        txDangnhap.setText(tenDangNhap);
        
        // Chọn phân quyền trong combobox
        String tenPhanQuyen = phanQuyenDAO.getTenPhanQuyenByMa(maPhanQuyen);
        if (tenPhanQuyen != null) {
            for (int i = 0; i < cb_txPhanquyen.getItemCount(); i++) {
                if (cb_txPhanquyen.getItemAt(i).equals(tenPhanQuyen)) {
                    cb_txPhanquyen.setSelectedIndex(i);
                    break;
                }
            }
        } else {
            cb_txPhanquyen.setSelectedIndex(0);
        }
    }
    
    // Phương thức cập nhật tài khoản
    private void capNhatTaiKhoanButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Kiểm tra xem đã chọn tài khoản chưa
        if (selectedMaTaiKhoan == null || selectedMaTaiKhoan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần cập nhật từ bảng!");
            return;
        }
        
        // Kiểm tra tên đăng nhập
        String tenDangNhap = txDangnhap.getText().trim();
        if (tenDangNhap.isEmpty() || tenDangNhap.equals("Nhập tên đăng nhập")) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên đăng nhập!");
            txDangnhap.requestFocus();
            return;
        }
        
        // Lấy tài khoản hiện tại để kiểm tra nếu tên đăng nhập thay đổi
        ArrayList<TaiKhoanDTO> danhSachTaiKhoan = taiKhoanDAO.getDanhSachTaiKhoan();
        String tenDangNhapCu = "";
        for (TaiKhoanDTO tk : danhSachTaiKhoan) {
            if (tk.getMaTaiKhoan().equals(selectedMaTaiKhoan)) {
                tenDangNhapCu = tk.getTenDangNhap();
                break;
            }
        }
        
        // Kiểm tra nếu tên đăng nhập thay đổi và đã tồn tại
        if (!tenDangNhap.equals(tenDangNhapCu) && taiKhoanDAO.kiemTraTenDangNhap(tenDangNhap)) {
            JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại. Vui lòng chọn tên khác!");
            txDangnhap.requestFocus();
            return;
        }
        
        // Lấy mã nhân viên từ combobox
        String maNV = cbManv.getSelectedItem().toString();
        
        // Lấy mã phân quyền từ tên phân quyền đã chọn
        String maPhanQuyen = null;
        String selectedPhanQuyen = cb_txPhanquyen.getSelectedItem().toString();
        if (!selectedPhanQuyen.equals("Truy xuất bảng phân quyền")) {
            maPhanQuyen = mapTenToMaPhanQuyen.get(selectedPhanQuyen);
        }
        
        // Tạo đối tượng TaiKhoanDTO để cập nhật
        TaiKhoanDTO taiKhoanCapNhat = new TaiKhoanDTO(
            selectedMaTaiKhoan,
            tenDangNhap,
            null, // Không cập nhật mật khẩu
            maPhanQuyen,
            maNV
        );
        
        // Cập nhật tài khoản trong database
        boolean ketQua = taiKhoanDAO.capNhatTaiKhoan(taiKhoanCapNhat);
        
        if (ketQua) {
            JOptionPane.showMessageDialog(this, "Cập nhật tài khoản thành công!");
            
            // Cập nhật bảng
            loadTableData();
            
            // Reset form
            resetForm();
            selectedMaTaiKhoan = null;
        } else {
            JOptionPane.showMessageDialog(this, "Cập nhật tài khoản thất bại!");
        }
    }
    
    // Phương thức xóa tài khoản
    private void xoaTaiKhoanButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Kiểm tra xem đã chọn tài khoản chưa
        if (selectedMaTaiKhoan == null || selectedMaTaiKhoan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn tài khoản cần xóa từ bảng!");
            return;
        }
        
        // Hiển thị hộp thoại xác nhận
        int option = JOptionPane.showConfirmDialog(this, 
                "Bạn có chắc muốn xóa tài khoản này?", 
                "Xác nhận xóa", 
                JOptionPane.YES_NO_OPTION);
        
        if (option == JOptionPane.YES_OPTION) {
            // Thực hiện xóa tài khoản
            boolean ketQua = taiKhoanDAO.xoaTaiKhoan(selectedMaTaiKhoan);
            
            if (ketQua) {
                JOptionPane.showMessageDialog(this, "Xóa tài khoản thành công!");
                
                // Cập nhật bảng
                loadTableData();
                
                // Reset form
                resetForm();
                selectedMaTaiKhoan = null;
            } else {
                JOptionPane.showMessageDialog(this, "Xóa tài khoản thất bại!");
            }
        }
    }
    
      private void loadEmployeeIDs() {
        cbManv.removeAllItems();    
        cbManv.addItem("Chọn mã nhân viên");        
        // Get list of employees from BUS
        ArrayList<NhanVienDTO> danhSachNhanVien = nhanVienBUS.getDanhSachNhanVien();        
        // Add employee IDs to combobox
        for (NhanVienDTO nv : danhSachNhanVien) {
            if (nv.getTrangThai() == 1) {
                cbManv.addItem(nv.getMaNhanVien());
            }
        }
    }
    
  private void updateEmployeeInfo() {
        // Get selected employee ID
        Object selectedItem = cbManv.getSelectedItem();
        
        if (selectedItem != null && !selectedItem.equals("Chọn mã nhân viên")) {
            String maNV = selectedItem.toString();

            NhanVienDTO nv = nhanVienBUS.timTheoMa(maNV);
            
            if (nv != null) {
                txTennv.setText(nv.getTenNhanVien());
                if (nv.getNgayVaoCnmm() != null) {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                    txNgayvaolam.setText(dateFormat.format(nv.getNgayVaoCnmm()));
                } else {
                    txNgayvaolam.setText("Không có thông tin");
                }
            }
        } else {
            txTennv.setText("");
            txNgayvaolam.setText("");
        }
    }
    
    private void loadTableData() {
        // Xóa dữ liệu cũ
        tableModel.setRowCount(0);
        
        // Lấy danh sách tài khoản từ DAO
        ArrayList<TaiKhoanDTO> danhSachTaiKhoan = taiKhoanDAO.getDanhSachTaiKhoan();
        
        // Thêm từng tài khoản vào bảng
        for (TaiKhoanDTO taiKhoan : danhSachTaiKhoan) {
            String maNV = taiKhoan.getMaNhanVien() != null ? taiKhoan.getMaNhanVien().toString() : "";
            
            // Lấy tên nhân viên từ mã nhân viên
            String tenNV = "";
            if (!maNV.isEmpty()) {
                NhanVienDTO nv = nhanVienBUS.timTheoMa(maNV);
                if (nv != null) {
                    tenNV = nv.getTenNhanVien();
                }
            }
            
            // Hiển thị mã phân quyền
            String maPhanQuyen = taiKhoan.getMaPhanQuyen() != null ? taiKhoan.getMaPhanQuyen() : "Không có quyền";
            
            // Thêm dòng mới vào bảng
            Object[] row = {
                maNV,
                tenNV,
                taiKhoan.getTenDangNhap(),
                maPhanQuyen
            };
            
            tableModel.addRow(row);
        }
    }
    
    private void loadPhanQuyen() {
        cb_txPhanquyen.removeAllItems();
        cb_txPhanquyen.addItem("Truy xuất bảng phân quyền");
        
        // Lấy danh sách phân quyền từ database
        mapTenToMaPhanQuyen = phanQuyenDAO.getMapTenMaPhanQuyen();
        
        // Thêm tên phân quyền vào combobox
        for (String tenPhanQuyen : mapTenToMaPhanQuyen.keySet()) {
            cb_txPhanquyen.addItem(tenPhanQuyen);
        }
    }


  private void themTaiKhoanButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Kiểm tra xem đã chọn nhân viên chưa
        if (cbManv.getSelectedItem() == null || cbManv.getSelectedItem().equals("Chọn mã nhân viên")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên cần thêm tài khoản!");
            return;
        }
        
        // Kiểm tra tên đăng nhập
        String tenDangNhap = txDangnhap.getText().trim();
        if (tenDangNhap.isEmpty() || tenDangNhap.equals("Nhập tên đăng nhập")) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên đăng nhập!");
            txDangnhap.requestFocus();
            return;
        }
        
        // Kiểm tra tên đăng nhập đã tồn tại chưa
        if (taiKhoanDAO.kiemTraTenDangNhap(tenDangNhap)) {
            JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại. Vui lòng chọn tên khác!");
            txDangnhap.requestFocus();
            return;
        }
        
        // Lấy mã nhân viên từ combobox (giữ nguyên là String)
        String maNV = cbManv.getSelectedItem().toString();
        
        // Tạo mã tài khoản ngẫu nhiên
        String maTaiKhoan = taiKhoanDAO.taoMaTaiKhoan();
        
        // Lấy mã phân quyền từ tên phân quyền đã chọn
        String maPhanQuyen = null;
        String selectedPhanQuyen = cb_txPhanquyen.getSelectedItem().toString();
        if (!selectedPhanQuyen.equals("Truy xuất bảng phân quyền")) {
            maPhanQuyen = mapTenToMaPhanQuyen.get(selectedPhanQuyen);
        }
        
        // Tạo đối tượng TaiKhoanDTO
        TaiKhoanDTO taiKhoanMoi = new TaiKhoanDTO(
            maTaiKhoan,
            tenDangNhap,
            "123456789", // Mật khẩu mặc định
            maPhanQuyen,
            maNV      // Sử dụng trực tiếp maNV là String
        );
        
        // Thêm tài khoản vào database
        boolean ketQua = taiKhoanDAO.themTaiKhoan(taiKhoanMoi);
        
        if (ketQua) {
            JOptionPane.showMessageDialog(this, "Thêm tài khoản thành công!\nMật khẩu mặc định là: 123456789");
            
            // Cập nhật bảng
            loadTableData();
            
            // Reset các trường nhập liệu
            resetForm();
        } else {
            JOptionPane.showMessageDialog(this, "Thêm tài khoản thất bại!");
        }
    }
    
    // Phương thức xử lý sự kiện khi nhấn nút Reset
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {
        resetForm();
    }
    
    // Phương thức reset form
    private void resetForm() {
        try{
            cbManv.setSelectedIndex(0);
            txTennv.setText("");
            txNgayvaolam.setText("");
            txDangnhap.setText("");
            cb_txPhanquyen.setSelectedIndex(0);
            loadEmployeeIDs();
            loadPhanQuyen();
            selectedMaTaiKhoan = null;
            JOptionPane.showMessageDialog(this, "Đã làm mới dữ liệu thành công!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi làm mới dữ liệu: " + e.getMessage());
        }
    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Manv;
    private javax.swing.JLabel Ngayvaolam;
    private javax.swing.JLabel Ngayvaolam1;
    private javax.swing.JLabel Nhomquyen;
    private javax.swing.JLabel Tennv;
    private javax.swing.JButton btnCapnhat;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnXacnhan;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbManv;
    private javax.swing.JComboBox<String> cb_txPhanquyen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbTaikhoan;
    private javax.swing.JTextField txDangnhap;
    private javax.swing.JTextField txNgayvaolam;
    private javax.swing.JTextField txTennv;
    // End of variables declaration//GEN-END:variables
}
